require 'spec_helper'
require 'json'

# Unit tests for Phrase::BlacklistedKeysApi
# Automatically generated by openapi-generator (https://openapi-generator.tech)
# Please update as you see appropriate
describe 'BlacklistedKeysApi' do
  before do
    # run before each test
    @api_instance = Phrase::BlacklistedKeysApi.new
  end

  after do
    # run after each test
  end

  describe 'test an instance of BlacklistedKeysApi' do
    it 'should create an instance of BlacklistedKeysApi' do
      expect(@api_instance).to be_instance_of(Phrase::BlacklistedKeysApi)
    end
  end

  # unit tests for blacklisted_key_create
  # Create a blacklisted key
  # Create a new rule for blacklisting keys.
  # @param project_id Project ID
  # @param blacklisted_key_create_parameters 
  # @param [Hash] opts the optional parameters
  # @option opts [String] :x_phrase_app_otp Two-Factor-Authentication token (optional)
  # @return [BlacklistedKey]
  describe 'blacklisted_key_create test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for blacklisted_key_delete
  # Delete a blacklisted key
  # Delete an existing rule for blacklisting keys.
  # @param project_id Project ID
  # @param id ID
  # @param [Hash] opts the optional parameters
  # @option opts [String] :x_phrase_app_otp Two-Factor-Authentication token (optional)
  # @return [nil]
  describe 'blacklisted_key_delete test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for blacklisted_key_show
  # Get a single blacklisted key
  # Get details on a single rule for blacklisting keys for a given project.
  # @param project_id Project ID
  # @param id ID
  # @param [Hash] opts the optional parameters
  # @option opts [String] :x_phrase_app_otp Two-Factor-Authentication token (optional)
  # @return [BlacklistedKey]
  describe 'blacklisted_key_show test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for blacklisted_key_update
  # Update a blacklisted key
  # Update an existing rule for blacklisting keys.
  # @param project_id Project ID
  # @param id ID
  # @param blacklisted_key_update_parameters 
  # @param [Hash] opts the optional parameters
  # @option opts [String] :x_phrase_app_otp Two-Factor-Authentication token (optional)
  # @return [BlacklistedKey]
  describe 'blacklisted_key_update test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for blacklisted_keys_list
  # List blacklisted keys
  # List all rules for blacklisting keys for the given project.
  # @param project_id Project ID
  # @param [Hash] opts the optional parameters
  # @option opts [String] :x_phrase_app_otp Two-Factor-Authentication token (optional)
  # @option opts [Integer] :page Page number
  # @option opts [Integer] :per_page allows you to specify a page size up to 100 items, 25 by default
  # @option opts [String] :branch specify the branch to use
  # @return [Array<BlacklistedKey>]
  describe 'blacklisted_keys_list test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

end
