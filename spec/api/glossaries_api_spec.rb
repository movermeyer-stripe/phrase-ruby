require 'spec_helper'
require 'json'

# Unit tests for Phrase::GlossariesApi
# Automatically generated by openapi-generator (https://openapi-generator.tech)
# Please update as you see appropriate
describe 'GlossariesApi' do
  before do
    # run before each test
    @api_instance = Phrase::GlossariesApi.new
  end

  after do
    # run after each test
  end

  describe 'test an instance of GlossariesApi' do
    it 'should create an instance of GlossariesApi' do
      expect(@api_instance).to be_instance_of(Phrase::GlossariesApi)
    end
  end

  # unit tests for glossaries_list
  # List glossaries
  # List all glossaries the current user has access to.
  # @param account_id Account ID
  # @param [Hash] opts the optional parameters
  # @option opts [String] :x_phrase_app_otp Two-Factor-Authentication token (optional)
  # @option opts [Integer] :page Page number
  # @option opts [Integer] :per_page allows you to specify a page size up to 100 items, 25 by default
  # @return [Array<Glossary>]
  describe 'glossaries_list test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for glossary_create
  # Create a glossary
  # Create a new glossary.
  # @param account_id Account ID
  # @param glossary_create_parameters 
  # @param [Hash] opts the optional parameters
  # @option opts [String] :x_phrase_app_otp Two-Factor-Authentication token (optional)
  # @return [Glossary]
  describe 'glossary_create test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for glossary_delete
  # Delete a glossary
  # Delete an existing glossary.
  # @param account_id Account ID
  # @param id ID
  # @param [Hash] opts the optional parameters
  # @option opts [String] :x_phrase_app_otp Two-Factor-Authentication token (optional)
  # @return [nil]
  describe 'glossary_delete test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for glossary_show
  # Get a single glossary
  # Get details on a single glossary.
  # @param account_id Account ID
  # @param id ID
  # @param [Hash] opts the optional parameters
  # @option opts [String] :x_phrase_app_otp Two-Factor-Authentication token (optional)
  # @return [Glossary]
  describe 'glossary_show test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for glossary_update
  # Update a glossary
  # Update an existing glossary.
  # @param account_id Account ID
  # @param id ID
  # @param glossary_update_parameters 
  # @param [Hash] opts the optional parameters
  # @option opts [String] :x_phrase_app_otp Two-Factor-Authentication token (optional)
  # @return [Glossary]
  describe 'glossary_update test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

end
