require 'spec_helper'
require 'json'

# Unit tests for Phrase::GlossaryTermsApi
# Automatically generated by openapi-generator (https://openapi-generator.tech)
# Please update as you see appropriate
describe 'GlossaryTermsApi' do
  before do
    # run before each test
    @api_instance = Phrase::GlossaryTermsApi.new
  end

  after do
    # run after each test
  end

  describe 'test an instance of GlossaryTermsApi' do
    it 'should create an instance of GlossaryTermsApi' do
      expect(@api_instance).to be_instance_of(Phrase::GlossaryTermsApi)
    end
  end

  # unit tests for glossary_term_create
  # Create a term
  # Create a new term in a term base (previously: glossary).
  # @param account_id Account ID
  # @param glossary_id Glossary ID
  # @param glossary_term_create_parameters 
  # @param [Hash] opts the optional parameters
  # @option opts [String] :x_phrase_app_otp Two-Factor-Authentication token (optional)
  # @return [GlossaryTerm]
  describe 'glossary_term_create test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for glossary_term_delete
  # Delete a term
  # Delete an existing term in a term base (previously: glossary).
  # @param account_id Account ID
  # @param glossary_id Glossary ID
  # @param id ID
  # @param [Hash] opts the optional parameters
  # @option opts [String] :x_phrase_app_otp Two-Factor-Authentication token (optional)
  # @return [nil]
  describe 'glossary_term_delete test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for glossary_term_show
  # Get a single term
  # Get details for a single term in the term base (previously: glossary).
  # @param account_id Account ID
  # @param glossary_id Glossary ID
  # @param id ID
  # @param [Hash] opts the optional parameters
  # @option opts [String] :x_phrase_app_otp Two-Factor-Authentication token (optional)
  # @return [GlossaryTerm]
  describe 'glossary_term_show test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for glossary_term_update
  # Update a term
  # Update an existing term in a term base (previously: glossary).
  # @param account_id Account ID
  # @param glossary_id Glossary ID
  # @param id ID
  # @param glossary_term_update_parameters 
  # @param [Hash] opts the optional parameters
  # @option opts [String] :x_phrase_app_otp Two-Factor-Authentication token (optional)
  # @return [GlossaryTerm]
  describe 'glossary_term_update test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for glossary_terms_list
  # List terms
  # List all terms in term bases (previously: glossary) that the current user has access to.
  # @param account_id Account ID
  # @param glossary_id Glossary ID
  # @param [Hash] opts the optional parameters
  # @option opts [String] :x_phrase_app_otp Two-Factor-Authentication token (optional)
  # @option opts [Integer] :page Page number
  # @option opts [Integer] :per_page Limit on the number of objects to be returned, between 1 and 100. 25 by default
  # @return [Array<GlossaryTerm>]
  describe 'glossary_terms_list test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

end
