require 'spec_helper'
require 'json'

# Unit tests for Phrase::StyleGuidesApi
# Automatically generated by openapi-generator (https://openapi-generator.tech)
# Please update as you see appropriate
describe 'StyleGuidesApi' do
  before do
    # run before each test
    @api_instance = Phrase::StyleGuidesApi.new
  end

  after do
    # run after each test
  end

  describe 'test an instance of StyleGuidesApi' do
    it 'should create an instance of StyleGuidesApi' do
      expect(@api_instance).to be_instance_of(Phrase::StyleGuidesApi)
    end
  end

  # unit tests for styleguide_create
  # Create a style guide
  # Create a new style guide.
  # @param project_id Project ID
  # @param styleguide_create_parameters 
  # @param [Hash] opts the optional parameters
  # @option opts [String] :x_phrase_app_otp Two-Factor-Authentication token (optional)
  # @return [StyleguideDetails]
  describe 'styleguide_create test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for styleguide_delete
  # Delete a style guide
  # Delete an existing style guide.
  # @param project_id Project ID
  # @param id ID
  # @param [Hash] opts the optional parameters
  # @option opts [String] :x_phrase_app_otp Two-Factor-Authentication token (optional)
  # @return [nil]
  describe 'styleguide_delete test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for styleguide_show
  # Get a single style guide
  # Get details on a single style guide.
  # @param project_id Project ID
  # @param id ID
  # @param [Hash] opts the optional parameters
  # @option opts [String] :x_phrase_app_otp Two-Factor-Authentication token (optional)
  # @return [StyleguideDetails]
  describe 'styleguide_show test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for styleguide_update
  # Update a style guide
  # Update an existing style guide.
  # @param project_id Project ID
  # @param id ID
  # @param styleguide_update_parameters 
  # @param [Hash] opts the optional parameters
  # @option opts [String] :x_phrase_app_otp Two-Factor-Authentication token (optional)
  # @return [StyleguideDetails]
  describe 'styleguide_update test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for styleguides_list
  # List style guides
  # List all styleguides for the given project.
  # @param project_id Project ID
  # @param [Hash] opts the optional parameters
  # @option opts [String] :x_phrase_app_otp Two-Factor-Authentication token (optional)
  # @option opts [Integer] :page Page number
  # @option opts [Integer] :per_page Limit on the number of objects to be returned, between 1 and 100. 25 by default
  # @return [Array<Styleguide>]
  describe 'styleguides_list test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

end
